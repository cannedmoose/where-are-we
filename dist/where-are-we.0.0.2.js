(()=>{"use strict";var e={22:function(e,t,n){var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},r.apply(this,arguments)},o=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),n(147),n(412);var a=n(836),s=n(860),c=n(658);function u(e){if(!e)return null;if(!e.city&&!e.region)return null;var t=[];return e.city&&t.push(e.city),e.region&&t.push(e.region),e.country&&t.push(e.country),t.join(", ")}function l(e){return null!=e}function f(e){var t=e.territoryInfo;return t.link?a.default.createElement("a",{href:t.link,target:"_blank"},t.name):a.default.createElement(a.default.Fragment,null,t.name)}function d(e){var t=e.territories;if(!t.length)return null;if(1===t.length)return a.default.createElement(a.default.Fragment,null,a.default.createElement(f,{territoryInfo:t[0]})," country");var n=t.slice(0,-1);return a.default.createElement(a.default.Fragment,null,n.map((function(e){return a.default.createElement(a.default.Fragment,null,a.default.createElement(f,{territoryInfo:e}),","," ")})),"and/or"," ",a.default.createElement(f,{territoryInfo:t[t.length-1]})," ","country")}function h(e){var t=e.territories,n=e.commonName;return 0===t.length?a.default.createElement("p",{className:c.default.text},"Your IP suggests that you may be in ",n,". We cannot find information about indigenous nations at this location, this does not mean that there are not any.*"):a.default.createElement("p",{className:c.default.text},"Your IP suggests that you may be on"," ",a.default.createElement(d,{territories:t}),", otherwise known as ",n,".*")}function p(e){var t=e.data,n=a.default.createRef();return a.default.createElement("div",{ref:n,onEnter:function(e){e instanceof HTMLDivElement&&(e.style.opacity="1")},className:c.default.container},a.default.createElement("div",{className:c.default.header},a.default.createElement("div",{className:c.default.content},a.default.createElement(h,r({},t))),a.default.createElement("div",{className:c.default.buttons},a.default.createElement("button",{onClick:function(){n.current&&(n.current.style.opacity="0",setTimeout((function(){var e,t;null===(t=null===(e=n.current)||void 0===e?void 0:e.parentElement)||void 0===t||t.removeChild(n.current)}),220))},className:c.default.closeButton,innerHTML:s.default}))),a.default.createElement("div",{className:c.default.secondaryContent},a.default.createElement("p",{className:c.default.disclaimer},a.default.createElement("span",{className:c.default.astrix},"*"),"The information presented here is derived from the maps at"," ",a.default.createElement("a",{href:"https://native-land.ca/",target:"_blank"},"native-land.ca")," ","cross-referenced by data from"," ",a.default.createElement("a",{href:"https://ipinfo.io/",target:"_blank"},"ipinfo.io"),". Note that this is based on your internet service providers location, and may not be incorrect for your actual physical location. This is not authoritative or representative and should be approached critically. Learn more about this project on"," ",a.default.createElement("a",{href:"https://github.com/e-e-e/where-are-we",target:"_blank"},"github"),"."),a.default.createElement("p",{className:c.default.disclaimer},"Do you know who the traditional custodians are of the land on which you stand?")))}(function(){return o(this,void 0,void 0,(function(){var e;return i(this,(function(t){switch(t.label){case 0:return[4,fetch("https://ipinfo.io/json").then((function(e){return e.json()})).then((function(e){var t,n=function(e){if(!e)return null;if(!e.loc||"string"!=typeof e.loc)return null;var t=e.loc.split(",");if(2!==t.length)return null;var n=parseFloat(t[0]),r=parseFloat(t[1]);return null==n||null==r?null:{lat:n,lng:r}}(e);return n?r(r({},n),{commonName:null!==(t=u(e))&&void 0!==t?t:""}):null}))];case 1:return(e=t.sent())?[4,(o=e,fetch("https://native-land.ca/api/index.php?maps=territories&position="+o.lat+","+o.lng).then((function(e){return e.json()})).catch((function(e){return console.error(e),[]})))]:[2,null];case 2:return[2,{territories:(n=t.sent(),n.map((function(e){var t=e.properties.Name,n=e.properties.description;return t?{name:t,link:n}:void 0})).filter(l)),commonName:e.commonName}]}var n,o}))}))})().then((function(e){if(e&&(e.territories.length||e.commonName)){var t=document.createElement("div");document.body.append(t),a.default.mount(t,a.default.createElement(p,{data:e}))}}))},308:(e,t,n)=>{n.d(t,{Z:()=>s});var r=n(15),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([e.id,".Xe\\+CI4y53sqVxZY4Wh84Xg\\=\\= {\n  line-height: 0;\n  display: flex;\n  align-content: center;\n  justify-content: center;\n  background: white;\n  -webkit-appearance: none;\n     -moz-appearance: none;\n          appearance: none;\n  outline: 0;\n  border: none;\n  border-radius: 50%;\n  padding: 0.5em;\n  margin: 0;\n  cursor: pointer;\n}\n\n.Xe\\+CI4y53sqVxZY4Wh84Xg\\=\\= > svg {\n  width: 16px;\n  height: 16px;\n}\n\n.Xe\\+CI4y53sqVxZY4Wh84Xg\\=\\=:focus,\n.Xe\\+CI4y53sqVxZY4Wh84Xg\\=\\=:hover {\n  background: grey;\n}\n\n.Xe\\+CI4y53sqVxZY4Wh84Xg\\=\\=:focus {\n  outline: none;\n}\n\n.sQBYOpQY5vfLC-xsGdQ3xw\\=\\= {\n  padding: 0;\n  margin: 0;\n  font-weight: bold;\n  color: black;\n  text-decoration: none;\n}\n\n.sQBYOpQY5vfLC-xsGdQ3xw\\=\\=:hover,\n.sQBYOpQY5vfLC-xsGdQ3xw\\=\\=:focus {\n  background-color: black;\n  color: white;\n}\n\n.pCR\\+2TCMdq0ViO\\+KEOMg9Q\\=\\= {\n  position: fixed;\n  display: flex;\n  flex-direction: column;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  color: white;\n  background: black;\n  border: none;\n  padding: 0;\n  transition: opacity 200ms ease-in;\n  opacity: 0;\n  overflow: hidden;\n  max-height: 50vh;\n  box-shadow: 0 0px 10px 5px rgba(0,0,0,0.2);\n}\n\n.cz1jbbdHXo-OdrCb5SXRxw\\=\\= {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  flex-wrap: nowrap;\n}\n.k-AhzJ7GpSFRGeiBYk8YZA\\=\\= {\n  margin: 0;\n  padding: 20px 20px;\n  overflow: auto;\n}\n.\\+nDGjr\\+f517Gn97JzLGung\\=\\= {\n  margin: 0;\n  padding: 0 20px 10px;\n  overflow: auto;\n}\n.VQcbcTZTnUJwN0RMFZ2c3A\\=\\= {\n  padding: 20px;\n  justify-items: center;\n  align-items: center;\n}\n\n.kQoM75vkiAddTAS5XjTbBA\\=\\=,\n.swoYpkIpNaGE4XgNBjt2cA\\=\\= {\n  font-family: sans-serif;\n  color: white;\n  line-height: 1.2;\n  font-weight: normal;\n  font-style: normal;\n  text-decoration: none;\n  padding: initial;\n  margin: initial;\n}\n.kQoM75vkiAddTAS5XjTbBA\\=\\= a,\n.swoYpkIpNaGE4XgNBjt2cA\\=\\= a {\n  color: white;\n}\n.kQoM75vkiAddTAS5XjTbBA\\=\\= a:hover,\n.swoYpkIpNaGE4XgNBjt2cA\\=\\= a:hover {\n  color: grey;\n}\n\n.kQoM75vkiAddTAS5XjTbBA\\=\\= {\n  font-size: 16px;\n}\n\n.swoYpkIpNaGE4XgNBjt2cA\\=\\= {\n  font-size: 12px;\n  margin-top: 10px;\n}\n\n.z1EEOLnp-LtTjUPwiBleTA\\=\\= {\n  font-size: 20px;\n  width: 15px;\n  display: inline-block;\n  line-height: 0;\n  transform: translate(0px, 7px);\n}\n","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA;EACE,cAAc;EACd,aAAa;EACb,qBAAqB;EACrB,uBAAuB;EACvB,iBAAiB;EACjB,wBAAgB;KAAhB,qBAAgB;UAAhB,gBAAgB;EAChB,UAAU;EACV,YAAY;EACZ,kBAAkB;EAClB,cAAc;EACd,SAAS;EACT,eAAe;AACjB;;AAEA;EACE,WAAW;EACX,YAAY;AACd;;AAEA;;EAEE,gBAAgB;AAClB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,UAAU;EACV,SAAS;EACT,iBAAiB;EACjB,YAAY;EACZ,qBAAqB;AACvB;;AAEA;;EAEE,uBAAuB;EACvB,YAAY;AACd;;AAEA;EACE,eAAe;EACf,aAAa;EACb,sBAAsB;EACtB,SAAS;EACT,OAAO;EACP,QAAQ;EACR,YAAY;EACZ,iBAAiB;EACjB,YAAY;EACZ,UAAU;EACV,iCAAiC;EACjC,UAAU;EACV,gBAAgB;EAChB,gBAAgB;EAChB,0CAA0C;AAC5C;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,8BAA8B;EAC9B,mBAAmB;EACnB,iBAAiB;AACnB;AACA;EACE,SAAS;EACT,kBAAkB;EAClB,cAAc;AAChB;AACA;EACE,SAAS;EACT,oBAAoB;EACpB,cAAc;AAChB;AACA;EACE,aAAa;EACb,qBAAqB;EACrB,mBAAmB;AACrB;;AAEA;;EAEE,uBAAuB;EACvB,YAAY;EACZ,gBAAgB;EAChB,mBAAmB;EACnB,kBAAkB;EAClB,qBAAqB;EACrB,gBAAgB;EAChB,eAAe;AACjB;AACA;;EAEE,YAAY;AACd;AACA;;EAEE,WAAW;AACb;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,eAAe;EACf,gBAAgB;AAClB;;AAEA;EACE,eAAe;EACf,WAAW;EACX,qBAAqB;EACrB,cAAc;EACd,8BAA8B;AAChC",sourcesContent:[".closeButton {\n  line-height: 0;\n  display: flex;\n  align-content: center;\n  justify-content: center;\n  background: white;\n  appearance: none;\n  outline: 0;\n  border: none;\n  border-radius: 50%;\n  padding: 0.5em;\n  margin: 0;\n  cursor: pointer;\n}\n\n.closeButton > svg {\n  width: 16px;\n  height: 16px;\n}\n\n.closeButton:focus,\n.closeButton:hover {\n  background: grey;\n}\n\n.closeButton:focus {\n  outline: none;\n}\n\n.link {\n  padding: 0;\n  margin: 0;\n  font-weight: bold;\n  color: black;\n  text-decoration: none;\n}\n\n.link:hover,\n.link:focus {\n  background-color: black;\n  color: white;\n}\n\n.container {\n  position: fixed;\n  display: flex;\n  flex-direction: column;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  color: white;\n  background: black;\n  border: none;\n  padding: 0;\n  transition: opacity 200ms ease-in;\n  opacity: 0;\n  overflow: hidden;\n  max-height: 50vh;\n  box-shadow: 0 0px 10px 5px rgba(0,0,0,0.2);\n}\n\n.header {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  flex-wrap: nowrap;\n}\n.content {\n  margin: 0;\n  padding: 20px 20px;\n  overflow: auto;\n}\n.secondaryContent {\n  margin: 0;\n  padding: 0 20px 10px;\n  overflow: auto;\n}\n.buttons {\n  padding: 20px;\n  justify-items: center;\n  align-items: center;\n}\n\n.text,\n.disclaimer {\n  font-family: sans-serif;\n  color: white;\n  line-height: 1.2;\n  font-weight: normal;\n  font-style: normal;\n  text-decoration: none;\n  padding: initial;\n  margin: initial;\n}\n.text a,\n.disclaimer a {\n  color: white;\n}\n.text a:hover,\n.disclaimer a:hover {\n  color: grey;\n}\n\n.text {\n  font-size: 16px;\n}\n\n.disclaimer {\n  font-size: 12px;\n  margin-top: 10px;\n}\n\n.astrix {\n  font-size: 20px;\n  width: 15px;\n  display: inline-block;\n  line-height: 0;\n  transform: translate(0px, 7px);\n}\n"],sourceRoot:""}]),a.locals={closeButton:"Xe+CI4y53sqVxZY4Wh84Xg==",link:"sQBYOpQY5vfLC-xsGdQ3xw==",container:"pCR+2TCMdq0ViO+KEOMg9Q==",header:"cz1jbbdHXo-OdrCb5SXRxw==",content:"k-AhzJ7GpSFRGeiBYk8YZA==",secondaryContent:"+nDGjr+f517Gn97JzLGung==",buttons:"VQcbcTZTnUJwN0RMFZ2c3A==",text:"kQoM75vkiAddTAS5XjTbBA==",disclaimer:"swoYpkIpNaGE4XgNBjt2cA==",astrix:"z1EEOLnp-LtTjUPwiBleTA=="};const s=a},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);r&&o[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),t.push(c))}},t}},15:e=>{function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}e.exports=function(e){var n,r,o=(r=4,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){var n=e&&("undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"]);if(null!=n){var r,o,i=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){s=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw o}}return i}}(n,r)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?t(e,n):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[1],a=o[3];if(!a)return i;if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),u="/*# ".concat(c," */"),l=a.sources.map((function(e){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(e," */")}));return[i].concat(l).concat([u]).join("\n")}return[i].join("\n")}},836:(e,t,n)=>{n.r(t),n.d(t,{default:()=>f});const r=new WeakMap,o=new WeakMap,i=new WeakMap;function a(e,t){(function(e){return 1===e.nodeType})(e)&&(t(e),e.childNodes.forEach((e=>a(e,t))))}function s(e){const t=o.get(e);t&&setTimeout((()=>t(e)),0)}function c(e){const t=i.get(e);t&&setTimeout(t,0)}const u=function(e){for(const t of e)"childList"===t.type&&(t.addedNodes.forEach((e=>{a(e,s)})),t.removedNodes.forEach((e=>{const t=r.get(e);r.delete(e),t&&(t.current=null),a(e,c)})))};function l(e){if(Array.isArray(e))return e.flatMap(l);if("string"==typeof e||"number"==typeof e)return document.createTextNode(e.toString());if(!e)return document.createTextNode("");if(e instanceof Node)return e;throw Error(e+" is not a valid element")}const f={createElement:function(e,t,...n){if(function(e){return"function"==typeof e}(e))return e(Object.assign(Object.assign({},t),{children:n}));const a=document.createElement(e);return t&&Object.keys(t).forEach((e=>{!function(e,t,n){if("ref"===t)r.set(e,n),n.current=e;else if("onExit"===t)i.set(e,n);else if("onEnter"===t)o.set(e,n);else if("style"===t){const t=(a=n,Object.keys(a).reduce(((e,t)=>{const n=a[t];return null==n?e:`${e} ${r=t,r.replace(/([A-Z])/g,"-$1").toLowerCase()}: ${function(e,t){return t&&"number"==typeof t?`${t}px`:t}(0,n)};`;var r}),""));e.setAttribute("style",t)}else"className"===t?e.setAttribute("class",n):t.startsWith("on")?e[t.toLowerCase()]=n:t in e?e[t]=n:e.setAttribute(t,n);var a}(a,e,t[e])})),a.append(...n.flatMap(l)),a},mount:function(e,t){return t?"string"==typeof t||"number"==typeof t?e.appendChild(document.createTextNode(t.toString())):(new MutationObserver(u).observe(e,{childList:!0,subtree:!0}),e.appendChild(t)):null},createRef:function(){return{current:null}},Fragment:function({children:e}){return Array.isArray(e)?e.map(l):[e]}}},412:(e,t,n)=>{n.r(t);const r=function(e){var t=this.constructor;return this.then((function(n){return t.resolve(e()).then((function(){return n}))}),(function(n){return t.resolve(e()).then((function(){return t.reject(n)}))}))},o=function(e){return new this((function(t,n){if(!e||void 0===e.length)return n(new TypeError(typeof e+" "+e+" is not iterable(cannot read property Symbol(Symbol.iterator))"));var r=Array.prototype.slice.call(e);if(0===r.length)return t([]);var o=r.length;function i(e,n){if(n&&("object"==typeof n||"function"==typeof n)){var a=n.then;if("function"==typeof a)return void a.call(n,(function(t){i(e,t)}),(function(n){r[e]={status:"rejected",reason:n},0==--o&&t(r)}))}r[e]={status:"fulfilled",value:n},0==--o&&t(r)}for(var a=0;a<r.length;a++)i(a,r[a])}))};var i=setTimeout,a="undefined"!=typeof setImmediate?setImmediate:null;function s(e){return Boolean(e&&void 0!==e.length)}function c(){}function u(e){if(!(this instanceof u))throw new TypeError("Promises must be constructed via new");if("function"!=typeof e)throw new TypeError("not a function");this._state=0,this._handled=!1,this._value=void 0,this._deferreds=[],A(e,this)}function l(e,t){for(;3===e._state;)e=e._value;0!==e._state?(e._handled=!0,u._immediateFn((function(){var n=1===e._state?t.onFulfilled:t.onRejected;if(null!==n){var r;try{r=n(e._value)}catch(e){return void d(t.promise,e)}f(t.promise,r)}else(1===e._state?f:d)(t.promise,e._value)}))):e._deferreds.push(t)}function f(e,t){try{if(t===e)throw new TypeError("A promise cannot be resolved with itself.");if(t&&("object"==typeof t||"function"==typeof t)){var n=t.then;if(t instanceof u)return e._state=3,e._value=t,void h(e);if("function"==typeof n)return void A((r=n,o=t,function(){r.apply(o,arguments)}),e)}e._state=1,e._value=t,h(e)}catch(t){d(e,t)}var r,o}function d(e,t){e._state=2,e._value=t,h(e)}function h(e){2===e._state&&0===e._deferreds.length&&u._immediateFn((function(){e._handled||u._unhandledRejectionFn(e._value)}));for(var t=0,n=e._deferreds.length;t<n;t++)l(e,e._deferreds[t]);e._deferreds=null}function p(e,t,n){this.onFulfilled="function"==typeof e?e:null,this.onRejected="function"==typeof t?t:null,this.promise=n}function A(e,t){var n=!1;try{e((function(e){n||(n=!0,f(t,e))}),(function(e){n||(n=!0,d(t,e))}))}catch(e){if(n)return;n=!0,d(t,e)}}u.prototype.catch=function(e){return this.then(null,e)},u.prototype.then=function(e,t){var n=new this.constructor(c);return l(this,new p(e,t,n)),n},u.prototype.finally=r,u.all=function(e){return new u((function(t,n){if(!s(e))return n(new TypeError("Promise.all accepts an array"));var r=Array.prototype.slice.call(e);if(0===r.length)return t([]);var o=r.length;function i(e,a){try{if(a&&("object"==typeof a||"function"==typeof a)){var s=a.then;if("function"==typeof s)return void s.call(a,(function(t){i(e,t)}),n)}r[e]=a,0==--o&&t(r)}catch(e){n(e)}}for(var a=0;a<r.length;a++)i(a,r[a])}))},u.allSettled=o,u.resolve=function(e){return e&&"object"==typeof e&&e.constructor===u?e:new u((function(t){t(e)}))},u.reject=function(e){return new u((function(t,n){n(e)}))},u.race=function(e){return new u((function(t,n){if(!s(e))return n(new TypeError("Promise.race accepts an array"));for(var r=0,o=e.length;r<o;r++)u.resolve(e[r]).then(t,n)}))},u._immediateFn="function"==typeof a&&function(e){a(e)}||function(e){i(e,0)},u._unhandledRejectionFn=function(e){"undefined"!=typeof console&&console&&console.warn("Possible Unhandled Promise Rejection:",e)};const y=u;var m=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==n.g)return n.g;throw new Error("unable to locate global object")}();"function"!=typeof m.Promise?m.Promise=y:(m.Promise.prototype.finally||(m.Promise.prototype.finally=r),m.Promise.allSettled||(m.Promise.allSettled=o))},860:(e,t,n)=>{n.r(t),n.d(t,{default:()=>r});const r='<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/><path d="M0 0h24v24H0z" fill="none"/></svg>'},658:(e,t,n)=>{n.r(t),n.d(t,{default:()=>a});var r=n(379),o=n.n(r),i=n(308);o()(i.Z,{insert:"head",singleton:!1});const a=i.Z.locals||{}},379:(e,t,n)=>{var r,o=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),i=[];function a(e){for(var t=-1,n=0;n<i.length;n++)if(i[n].identifier===e){t=n;break}return t}function s(e,t){for(var n={},r=[],o=0;o<e.length;o++){var s=e[o],c=t.base?s[0]+t.base:s[0],u=n[c]||0,l="".concat(c," ").concat(u);n[c]=u+1;var f=a(l),d={css:s[1],media:s[2],sourceMap:s[3]};-1!==f?(i[f].references++,i[f].updater(d)):i.push({identifier:l,updater:A(d,t),references:1}),r.push(l)}return r}function c(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var i=n.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var a=o(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var u,l=(u=[],function(e,t){return u[e]=t,u.filter(Boolean).join("\n")});function f(e,t,n,r){var o=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=l(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}function d(e,t,n){var r=n.css,o=n.media,i=n.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var h=null,p=0;function A(e,t){var n,r,o;if(t.singleton){var i=p++;n=h||(h=c(t)),r=f.bind(null,n,i,!1),o=f.bind(null,n,i,!0)}else n=c(t),r=d.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var n=s(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var o=a(n[r]);i[o].references--}for(var c=s(e,t),u=0;u<n.length;u++){var l=a(n[u]);0===i[l].references&&(i[l].updater(),i.splice(l,1))}n=c}}}},147:(e,t,n)=>{n.r(t),n.d(t,{Headers:()=>p,Request:()=>E,Response:()=>B,DOMException:()=>x,fetch:()=>T});var r="undefined"!=typeof globalThis&&globalThis||"undefined"!=typeof self&&self||void 0!==r&&r,o="URLSearchParams"in r,i="Symbol"in r&&"iterator"in Symbol,a="FileReader"in r&&"Blob"in r&&function(){try{return new Blob,!0}catch(e){return!1}}(),s="FormData"in r,c="ArrayBuffer"in r;if(c)var u=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],l=ArrayBuffer.isView||function(e){return e&&u.indexOf(Object.prototype.toString.call(e))>-1};function f(e){if("string"!=typeof e&&(e=String(e)),/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(e)||""===e)throw new TypeError('Invalid character in header field name: "'+e+'"');return e.toLowerCase()}function d(e){return"string"!=typeof e&&(e=String(e)),e}function h(e){var t={next:function(){var t=e.shift();return{done:void 0===t,value:t}}};return i&&(t[Symbol.iterator]=function(){return t}),t}function p(e){this.map={},e instanceof p?e.forEach((function(e,t){this.append(t,e)}),this):Array.isArray(e)?e.forEach((function(e){this.append(e[0],e[1])}),this):e&&Object.getOwnPropertyNames(e).forEach((function(t){this.append(t,e[t])}),this)}function A(e){if(e.bodyUsed)return Promise.reject(new TypeError("Already read"));e.bodyUsed=!0}function y(e){return new Promise((function(t,n){e.onload=function(){t(e.result)},e.onerror=function(){n(e.error)}}))}function m(e){var t=new FileReader,n=y(t);return t.readAsArrayBuffer(e),n}function b(e){if(e.slice)return e.slice(0);var t=new Uint8Array(e.byteLength);return t.set(new Uint8Array(e)),t.buffer}function v(){return this.bodyUsed=!1,this._initBody=function(e){var t;this.bodyUsed=this.bodyUsed,this._bodyInit=e,e?"string"==typeof e?this._bodyText=e:a&&Blob.prototype.isPrototypeOf(e)?this._bodyBlob=e:s&&FormData.prototype.isPrototypeOf(e)?this._bodyFormData=e:o&&URLSearchParams.prototype.isPrototypeOf(e)?this._bodyText=e.toString():c&&a&&(t=e)&&DataView.prototype.isPrototypeOf(t)?(this._bodyArrayBuffer=b(e.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):c&&(ArrayBuffer.prototype.isPrototypeOf(e)||l(e))?this._bodyArrayBuffer=b(e):this._bodyText=e=Object.prototype.toString.call(e):this._bodyText="",this.headers.get("content-type")||("string"==typeof e?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):o&&URLSearchParams.prototype.isPrototypeOf(e)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},a&&(this.blob=function(){var e=A(this);if(e)return e;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?A(this)||(ArrayBuffer.isView(this._bodyArrayBuffer)?Promise.resolve(this._bodyArrayBuffer.buffer.slice(this._bodyArrayBuffer.byteOffset,this._bodyArrayBuffer.byteOffset+this._bodyArrayBuffer.byteLength)):Promise.resolve(this._bodyArrayBuffer)):this.blob().then(m)}),this.text=function(){var e,t,n,r=A(this);if(r)return r;if(this._bodyBlob)return e=this._bodyBlob,n=y(t=new FileReader),t.readAsText(e),n;if(this._bodyArrayBuffer)return Promise.resolve(function(e){for(var t=new Uint8Array(e),n=new Array(t.length),r=0;r<t.length;r++)n[r]=String.fromCharCode(t[r]);return n.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},s&&(this.formData=function(){return this.text().then(w)}),this.json=function(){return this.text().then(JSON.parse)},this}p.prototype.append=function(e,t){e=f(e),t=d(t);var n=this.map[e];this.map[e]=n?n+", "+t:t},p.prototype.delete=function(e){delete this.map[f(e)]},p.prototype.get=function(e){return e=f(e),this.has(e)?this.map[e]:null},p.prototype.has=function(e){return this.map.hasOwnProperty(f(e))},p.prototype.set=function(e,t){this.map[f(e)]=d(t)},p.prototype.forEach=function(e,t){for(var n in this.map)this.map.hasOwnProperty(n)&&e.call(t,this.map[n],n,this)},p.prototype.keys=function(){var e=[];return this.forEach((function(t,n){e.push(n)})),h(e)},p.prototype.values=function(){var e=[];return this.forEach((function(t){e.push(t)})),h(e)},p.prototype.entries=function(){var e=[];return this.forEach((function(t,n){e.push([n,t])})),h(e)},i&&(p.prototype[Symbol.iterator]=p.prototype.entries);var g=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function E(e,t){if(!(this instanceof E))throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');var n,r,o=(t=t||{}).body;if(e instanceof E){if(e.bodyUsed)throw new TypeError("Already read");this.url=e.url,this.credentials=e.credentials,t.headers||(this.headers=new p(e.headers)),this.method=e.method,this.mode=e.mode,this.signal=e.signal,o||null==e._bodyInit||(o=e._bodyInit,e.bodyUsed=!0)}else this.url=String(e);if(this.credentials=t.credentials||this.credentials||"same-origin",!t.headers&&this.headers||(this.headers=new p(t.headers)),this.method=(r=(n=t.method||this.method||"GET").toUpperCase(),g.indexOf(r)>-1?r:n),this.mode=t.mode||this.mode||null,this.signal=t.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&o)throw new TypeError("Body not allowed for GET or HEAD requests");if(this._initBody(o),!("GET"!==this.method&&"HEAD"!==this.method||"no-store"!==t.cache&&"no-cache"!==t.cache)){var i=/([?&])_=[^&]*/;i.test(this.url)?this.url=this.url.replace(i,"$1_="+(new Date).getTime()):this.url+=(/\?/.test(this.url)?"&":"?")+"_="+(new Date).getTime()}}function w(e){var t=new FormData;return e.trim().split("&").forEach((function(e){if(e){var n=e.split("="),r=n.shift().replace(/\+/g," "),o=n.join("=").replace(/\+/g," ");t.append(decodeURIComponent(r),decodeURIComponent(o))}})),t}function B(e,t){if(!(this instanceof B))throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');t||(t={}),this.type="default",this.status=void 0===t.status?200:t.status,this.ok=this.status>=200&&this.status<300,this.statusText=void 0===t.statusText?"":""+t.statusText,this.headers=new p(t.headers),this.url=t.url||"",this._initBody(e)}E.prototype.clone=function(){return new E(this,{body:this._bodyInit})},v.call(E.prototype),v.call(B.prototype),B.prototype.clone=function(){return new B(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new p(this.headers),url:this.url})},B.error=function(){var e=new B(null,{status:0,statusText:""});return e.type="error",e};var C=[301,302,303,307,308];B.redirect=function(e,t){if(-1===C.indexOf(t))throw new RangeError("Invalid status code");return new B(null,{status:t,headers:{location:e}})};var x=r.DOMException;try{new x}catch(e){(x=function(e,t){this.message=e,this.name=t;var n=Error(e);this.stack=n.stack}).prototype=Object.create(Error.prototype),x.prototype.constructor=x}function T(e,t){return new Promise((function(n,o){var i=new E(e,t);if(i.signal&&i.signal.aborted)return o(new x("Aborted","AbortError"));var s=new XMLHttpRequest;function u(){s.abort()}s.onload=function(){var e,t,r={status:s.status,statusText:s.statusText,headers:(e=s.getAllResponseHeaders()||"",t=new p,e.replace(/\r?\n[\t ]+/g," ").split("\r").map((function(e){return 0===e.indexOf("\n")?e.substr(1,e.length):e})).forEach((function(e){var n=e.split(":"),r=n.shift().trim();if(r){var o=n.join(":").trim();t.append(r,o)}})),t)};r.url="responseURL"in s?s.responseURL:r.headers.get("X-Request-URL");var o="response"in s?s.response:s.responseText;setTimeout((function(){n(new B(o,r))}),0)},s.onerror=function(){setTimeout((function(){o(new TypeError("Network request failed"))}),0)},s.ontimeout=function(){setTimeout((function(){o(new TypeError("Network request failed"))}),0)},s.onabort=function(){setTimeout((function(){o(new x("Aborted","AbortError"))}),0)},s.open(i.method,function(e){try{return""===e&&r.location.href?r.location.href:e}catch(t){return e}}(i.url),!0),"include"===i.credentials?s.withCredentials=!0:"omit"===i.credentials&&(s.withCredentials=!1),"responseType"in s&&(a?s.responseType="blob":c&&i.headers.get("Content-Type")&&-1!==i.headers.get("Content-Type").indexOf("application/octet-stream")&&(s.responseType="arraybuffer")),!t||"object"!=typeof t.headers||t.headers instanceof p?i.headers.forEach((function(e,t){s.setRequestHeader(t,e)})):Object.getOwnPropertyNames(t.headers).forEach((function(e){s.setRequestHeader(e,d(t.headers[e]))})),i.signal&&(i.signal.addEventListener("abort",u),s.onreadystatechange=function(){4===s.readyState&&i.signal.removeEventListener("abort",u)}),s.send(void 0===i._bodyInit?null:i._bodyInit)}))}T.polyfill=!0,r.fetch||(r.fetch=T,r.Headers=p,r.Request=E,r.Response=B)}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={id:r,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n(22)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,